"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDom = require("react-dom");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_application_base_1 = require("@microsoft/sp-application-base");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var BaseDialog_1 = require("./BaseDialog");
var FabricDialogWrapper_1 = require("./FabricDialogWrapper");
var AlertDialog_1 = require("./AlertDialog");
var PromptDialog_1 = require("./PromptDialog");
function _getInternalDialogApi(dialog) {
    return dialog; 
}
exports._getInternalDialogApi = _getInternalDialogApi;
var DialogManager = (function () {
    function DialogManager(config) {
        sp_core_library_1.Validate.isNotNullOrUndefined(config, 'DialogManager Configuration');
        sp_core_library_1.Validate.isNotNullOrUndefined(config.domElement, 'Dialog Container');
        this._container = config.domElement;
        this._mainDialogDiv = document.createElement('DIV');
        this._childDialogDiv = document.createElement('DIV');
        this._container.appendChild(this._mainDialogDiv);
        this._container.appendChild(this._childDialogDiv);
        this._requests = [];
    }
    Object.defineProperty(DialogManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DialogManager(sp_application_base_1._DialogManagerConfiguration.instance);
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    DialogManager.prototype.alert = function (message, options) {
        return this.show(new AlertDialog_1.default(message), options);
    };
    DialogManager.prototype.prompt = function (message, options) {
        var resolve = function () { return; };
        var promise = new Promise(function (res) { return resolve = res; });
        this.show(new PromptDialog_1.default(message, resolve), options);
        return promise;
    };
    Object.defineProperty(DialogManager.prototype, "isShowingDialog", {
        get: function () {
            return this._activeDialogs.filter(function (d) { return _getInternalDialogApi(d)._state === BaseDialog_1.DialogState.Open; }).length > 0;
        },
        enumerable: true,
        configurable: true
    });
    DialogManager.prototype.show = function (dialog, options) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(dialog, 'dialog');
        var _dialog = _getInternalDialogApi(dialog);
        var qosMonitor = new sp_telemetry_1._QosMonitor('DialogManager.show');
        sp_telemetry_1._TraceLogger.logVerbose(DialogManager._logSource, 'New request to show a dialog has been submitted.');
        try {
            if (!_dialog._isActive) {
                var resolve_1 = function () { return; }, reject_1 = function () { return; };
                var promise = new Promise(function (resolveCallback, rejectCallback) {
                    resolve_1 = resolveCallback;
                    reject_1 = rejectCallback;
                }).then(function () { qosMonitor.writeSuccess(); }, function (e) { qosMonitor.writeExpectedFailure('RequestRejected', e); });
                var id = sp_core_library_1.Guid.newGuid();
                this._requests.push({ id: id, dialog: dialog, resolve: resolve_1, reject: reject_1, options: options });
                _dialog._requestAck(id);
                _dialog._setState(BaseDialog_1.DialogState.Pending);
                Promise.resolve(undefined).then(function () {
                    _this._processNextRequest();
                });
                return promise;
            }
            else {
                qosMonitor.writeExpectedFailure('DuplicateRequest');
                var error = new Error('Cannot accept new requests for active dialogs.');
                sp_telemetry_1._TraceLogger.logError(DialogManager._logSource, error);
                return Promise.reject(error);
            }
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure('UnhandledError', e);
            return Promise.reject(e);
        }
    };
    DialogManager.prototype._showSecondary = function (dialog, ownerRequestId, options) {
        sp_core_library_1.Validate.isNotNullOrUndefined(dialog, 'dialog');
        sp_core_library_1.Validate.isNotNullOrUndefined(ownerRequestId, 'ownerRequestId');
        var _dialog = _getInternalDialogApi(dialog);
        var qosMonitor = new sp_telemetry_1._QosMonitor('DialogManager.showSecondary');
        sp_telemetry_1._TraceLogger.logVerbose(DialogManager._logSource, 'A request to show a secondary dialog has been submitted.');
        try {
            if (this._hasPermissionToShow(ownerRequestId)) {
                var resolve_2 = function () { return; }, reject_2 = function () { return; };
                var promise = new Promise(function (resolveCallback, rejectCallback) {
                    resolve_2 = resolveCallback;
                    reject_2 = rejectCallback;
                }).then(function () { qosMonitor.writeSuccess(); }, function (e) { qosMonitor.writeExpectedFailure('RequestRejected', e); });
                var id = sp_core_library_1.Guid.newGuid();
                var isSecondary = true;
                this._requests.unshift({ id: id, dialog: dialog, resolve: resolve_2, reject: reject_2, isSecondary: isSecondary, options: options });
                _dialog._requestAck(id, true);
                _dialog._setState(BaseDialog_1.DialogState.Approved);
                this._open(dialog);
                return promise;
            }
            else {
                var error = new Error('Only an active dialog can show a secondary dialog.');
                sp_telemetry_1._TraceLogger.logError(DialogManager._logSource, error);
                qosMonitor.writeExpectedFailure('PermissionDenied');
                return Promise.reject(error);
            }
        }
        catch (e) {
            sp_telemetry_1._TraceLogger.logErrorData({
                source: DialogManager._logSource,
                error: e
            });
            qosMonitor.writeUnexpectedFailure('UnhandledError', e);
            return Promise.reject(e);
        }
    };
    DialogManager.prototype._abort = function (dialog) {
        var _dialog = _getInternalDialogApi(dialog);
        if (dialog && !_dialog._isActive) {
            _dialog._setState(BaseDialog_1.DialogState.New);
            this._removeRequest(_dialog._requestId, false);
        }
    };
    DialogManager.prototype._rejectOnOpen = function (dialog) {
        var _this = this;
        var _dialog = _getInternalDialogApi(dialog);
        if (dialog) {
            this._getUiComponent(dialog).close().then(function () {
                _dialog._setState(BaseDialog_1.DialogState.New);
                _this._removeRequest(_dialog._requestId, false);
            });
        }
    };
    DialogManager.prototype._close = function (dialog) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(dialog, 'dialog');
        var _dialog = _getInternalDialogApi(dialog);
        var qosMonitor = new sp_telemetry_1._QosMonitor('DialogManager.close');
        if (_dialog._isActive) {
            var closePromise = this._getUiComponent(dialog).close().then(function () {
                _dialog.onAfterClose();
                _dialog._setState(BaseDialog_1.DialogState.Closed);
                _this._removeRequest(_dialog._requestId, true);
            }).then(function () { qosMonitor.writeSuccess(); }, function (e) { qosMonitor.writeExpectedFailure('RequestRejected', e); });
            closePromise.then(function () {
                if (_this._pendingRequests.length > 0 || _this._hasHiddenDialog) {
                    _this._processNextRequest();
                }
            });
            return closePromise;
        }
        else {
            qosMonitor.writeSuccess();
            return Promise.resolve(undefined);
        }
    };
    Object.defineProperty(DialogManager.prototype, "_activeDialogs", {
        get: function () {
            return this._requests.filter(function (r) { return _getInternalDialogApi(r.dialog)._isActive; }).map(function (r) { return r.dialog; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManager.prototype, "_pendingRequests", {
        get: function () {
            return this._requests.filter(function (r) { return _getInternalDialogApi(r.dialog)._state === BaseDialog_1.DialogState.Pending; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManager.prototype, "_hasHiddenDialog", {
        get: function () {
            return this._requests.filter(function (r) { return _getInternalDialogApi(r.dialog)._state === BaseDialog_1.DialogState.Hidden; }).length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManager.prototype, "_currentlyOpenDialogRequest", {
        get: function () {
            return this._requests.filter(function (r) { return _getInternalDialogApi(r.dialog)._state === BaseDialog_1.DialogState.Open; })[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManager.prototype, "_config", {
        get: function () {
            return sp_application_base_1._DialogManagerConfiguration.instance;
        },
        enumerable: true,
        configurable: true
    });
    DialogManager.prototype._processNextRequest = function () {
        if (this.isShowingDialog) {
            return;
        }
        var qosMonitor = new sp_telemetry_1._QosMonitor('DialogManager.processRequest');
        try {
            for (var _i = 0, _a = this._requests; _i < _a.length; _i++) {
                var request = _a[_i];
                var _dialog = _getInternalDialogApi(request.dialog);
                var abort = false;
                if (!request.isSecondary && request.options) {
                    var confirmOpen = request.options.confirmOpen ? request.options.confirmOpen() : true;
                    abort = !confirmOpen;
                }
                if (abort) {
                    var message = 'The request to show the dialog was aborted.';
                    sp_telemetry_1._TraceLogger.logVerbose(DialogManager._logSource, message);
                    request.reject(new Error(message));
                    this._abort(request.dialog);
                }
                else if (_dialog._state === BaseDialog_1.DialogState.Approved ||
                    _dialog._state === BaseDialog_1.DialogState.Hidden) {
                    this._open(request.dialog);
                }
                else if (_dialog._state === BaseDialog_1.DialogState.Pending) {
                    if (this._config.allowDialogs) {
                        _dialog._setState(BaseDialog_1.DialogState.Approved);
                        this._open(request.dialog);
                    }
                    else {
                        var error = new Error('The application cannot accept dialogs at the moment.');
                        sp_telemetry_1._TraceLogger.logError(DialogManager._logSource, error);
                        request.reject(error);
                        _dialog._setState(BaseDialog_1.DialogState.Rejected);
                        this._removeRequest(request.id, false);
                    }
                    break;
                }
            }
            qosMonitor.writeSuccess();
        }
        catch (e) {
            sp_telemetry_1._TraceLogger.logErrorData({
                source: DialogManager._logSource,
                error: e
            });
            qosMonitor.writeUnexpectedFailure('UnhandledError', e);
        }
    };
    DialogManager.prototype._removeRequest = function (reqId, shouldResolve) {
        if (reqId) {
            for (var i = 0; i < this._requests.length; i++) {
                var req = this._requests[i];
                if (req.id === reqId) {
                    if (shouldResolve) {
                        req.resolve();
                    }
                    this._requests.splice(i, 1);
                }
            }
        }
    };
    DialogManager.prototype._hide = function (dialog) {
        var _dialog = _getInternalDialogApi(dialog);
        if (dialog && _dialog._state === BaseDialog_1.DialogState.Open) {
            this._getUiComponent(dialog).close().then(function () {
                _dialog._setState(BaseDialog_1.DialogState.Hidden);
            });
        }
    };
    DialogManager.prototype._unhide = function (dialog) {
        var _dialog = _getInternalDialogApi(dialog);
        if (dialog && _dialog._state === BaseDialog_1.DialogState.Hidden) {
            this._getUiComponent(dialog).open(dialog);
            _dialog._setState(BaseDialog_1.DialogState.Open);
        }
    };
    DialogManager.prototype._getUiComponent = function (dialog) {
        return dialog.isSecondary ? this._childUiComponent : this._mainUiComponent;
    };
    DialogManager.prototype._open = function (dialog) {
        var _this = this;
        var _dialog = _getInternalDialogApi(dialog);
        if (_dialog._state === BaseDialog_1.DialogState.Hidden) {
            this._unhide(dialog);
            return true;
        }
        if (_dialog._state === BaseDialog_1.DialogState.Approved) {
            if (this.isShowingDialog && dialog.isSecondary) {
                this._hide(this._currentlyOpenDialogRequest.dialog);
                if (!this._childUiComponent && this._childDialogDiv) {
                    ReactDom.render(React.createElement(FabricDialogWrapper_1.default, {
                        closeCallback: this._close,
                        ref: function (c) { _this._childUiComponent = c; }
                    }), this._childDialogDiv);
                }
                this._childUiComponent.open(dialog).then(function () {
                    _dialog._setState(BaseDialog_1.DialogState.Open);
                });
                return true;
            }
            else {
                if (!this._mainUiComponent && this._mainDialogDiv) {
                    ReactDom.render(React.createElement(FabricDialogWrapper_1.default, {
                        closeCallback: this._close,
                        ref: function (c) { _this._mainUiComponent = c; }
                    }), this._mainDialogDiv);
                }
                this._mainUiComponent.open(dialog).then(function () {
                    _dialog._setState(BaseDialog_1.DialogState.Open);
                });
                return true;
            }
        }
        return false;
    };
    DialogManager.prototype._hasPermissionToShow = function (requestId) {
        var request = this._getRequestById(requestId);
        return request && _getInternalDialogApi(request.dialog)._isActive && !this._currentlyOpenDialogRequest.isSecondary;
    };
    DialogManager.prototype._getRequestById = function (id) {
        return this._requests.filter(function (r) { return r.id.equals(id); })[0];
    };
    DialogManager._logSource = sp_telemetry_1._LogSource.create('DialogManager');
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "show", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_abort", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_rejectOnOpen", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_close", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_processNextRequest", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_removeRequest", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_hide", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_unhide", null);
    __decorate([
        office_ui_fabric_react_1.autobind
    ], DialogManager.prototype, "_open", null);
    return DialogManager;
}());
exports.default = DialogManager;
