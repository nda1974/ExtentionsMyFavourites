"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = require("@microsoft/decorators");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var DialogManager_1 = require("./DialogManager");
var Dialog_1 = require("./Dialog");
var DialogState;
(function (DialogState) {
    DialogState[DialogState["New"] = 0] = "New";
    DialogState[DialogState["Pending"] = 1] = "Pending";
    DialogState[DialogState["Rejected"] = 2] = "Rejected";
    DialogState[DialogState["Aborted"] = 3] = "Aborted";
    DialogState[DialogState["Approved"] = 4] = "Approved";
    DialogState[DialogState["Open"] = 5] = "Open";
    DialogState[DialogState["Closed"] = 6] = "Closed";
    DialogState[DialogState["Hidden"] = 7] = "Hidden";
})(DialogState = exports.DialogState || (exports.DialogState = {}));
var BaseDialog = (function () {
    function BaseDialog(config) {
        this._config = config || {};
        this._state = DialogState.New;
        this._isSecondary = false;
        this.close = this.close.bind(this);
        this.render = this.render.bind(this);
    }
    Object.defineProperty(BaseDialog.prototype, "_configuration", {
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDialog.prototype, "isSecondary", {
        get: function () {
            return this._isSecondary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDialog.prototype, "isOpen", {
        get: function () {
            return this._state === DialogState.Open;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDialog.prototype, "isHidden", {
        get: function () {
            return this._state === DialogState.Hidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDialog.prototype, "secondaryDialogProvider", {
        get: function () {
            if (this.isSecondary) {
                return undefined;
            }
            if (!this._secondaryDialogProvider && this._requestId) {
                this._secondaryDialogProvider = Dialog_1.SecondaryDialogProvider._create(DialogManager_1.default.instance, this._requestId);
            }
            return this._secondaryDialogProvider;
        },
        enumerable: true,
        configurable: true
    });
    BaseDialog.prototype.show = function (options) {
        if (DialogManager_1.default.instance) {
            return DialogManager_1.default.instance.show(this, options);
        }
        else {
            return Promise.reject(new Error('This application is not configured to accept dialogs.'));
        }
    };
    BaseDialog.prototype.close = function () {
        if (DialogManager_1.default.instance) {
            if (this._isActive) {
                return DialogManager_1.default.instance._close(this);
            }
            else {
                DialogManager_1.default.instance._abort(this);
            }
        }
        return Promise.resolve(undefined);
    };
    Object.defineProperty(BaseDialog.prototype, "domElement", {
        get: function () {
            return this._domElement;
        },
        enumerable: true,
        configurable: true
    });
    BaseDialog.prototype.onBeforeOpen = function () {
        return Promise.resolve(undefined);
    };
    BaseDialog.prototype.onAfterClose = function () {
    };
    Object.defineProperty(BaseDialog.prototype, "_isActive", {
        get: function () {
            return this._state === DialogState.Approved ||
                this._state === DialogState.Open ||
                this._state === DialogState.Hidden;
        },
        enumerable: true,
        configurable: true
    });
    BaseDialog.prototype._render = function (container) {
        var _this = this;
        this._domElement = container;
        if (!this._renderPromise) {
            var rejectRender_1, resolveRender_1;
            this._renderPromise = new Promise(function (res, rej) {
                resolveRender_1 = res;
                rejectRender_1 = rej;
            });
            this._closedWhileRendering = false;
            this.onBeforeOpen().then(function () {
                if (!_this._closedWhileRendering) {
                    _this.render();
                    resolveRender_1();
                }
                else {
                    rejectRender_1();
                }
            }).catch(function () {
                DialogManager_1.default.instance._rejectOnOpen(_this);
                rejectRender_1();
            });
        }
        return this._renderPromise;
    };
    BaseDialog.prototype._setState = function (newState) {
        if (newState === DialogState.Closed) {
            this._secondaryDialogProvider = undefined;
            if (this._renderPromise) {
                this._closedWhileRendering = true;
                this._renderPromise = undefined;
            }
        }
        sp_telemetry_1._TraceLogger.logVerboseData({
            source: BaseDialog._logSource,
            message: "Dialog state changed from '" + DialogState[this._state] + "' to '" + DialogState[newState] + "'."
        });
        this._state = newState;
    };
    BaseDialog.prototype._requestAck = function (requestId, isSecondary) {
        this._requestId = requestId;
        this._isSecondary = !!isSecondary;
    };
    BaseDialog._logSource = sp_telemetry_1._LogSource.create('BaseDialog');
    __decorate([
        decorators_1.virtual
    ], BaseDialog.prototype, "onBeforeOpen", null);
    __decorate([
        decorators_1.virtual
    ], BaseDialog.prototype, "onAfterClose", null);
    return BaseDialog;
}());
exports.default = BaseDialog;
