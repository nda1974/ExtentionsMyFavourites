import BaseDialog from './BaseDialog';
/**
 * Options for showing a dialog
 *
 * @beta
 */
export interface IDialogShowOptions {
    /**
     * A callback that is invoked immediately before the dialog receives focus.
     *
     * @remarks
     * Provide this callback if there is a case when you want to abort showing the dialog before it's approved
     * by the framework. For example, you can check if a long time has passed since the request was made or the
     * the component requesting the dialog is disposed and you don't want to show the dialog anymore. It is
     * important to keep this callback lightweight so the framework can resolve it quickly and the user interface
     * does not have to wait a long time for it.
     */
    confirmOpen?: () => boolean;
}
/**
 * Options for showing an alert dialog
 *
 * @beta
 */
export interface IAlertOptions extends IDialogShowOptions {
}
/**
 * Options for showing a prompt dialog
 *
 * @beta
 */
export interface IPromptOptions extends IDialogShowOptions {
    /**
     * The default value for the input text field of prompt dialog
     */
    defaultValue?: string;
}
/**
 * A static class for showing stock dialogs such as an alert or prompt.
 *
 * @beta
 */
export default class Dialog {
    /**
     * Alerts a message to the user with a user-friendly interface. Calling this method sends a request to application
     * to show the alert dialog.
     *
     * @remarks
     * There might be a delay until the dialog is approved and shown by the application, for
     * example, if there is another dialog currently being shown. The returned promise resolves when the dialog is
     * successfully shown and closed. The promise rejects if the application rejects the request for any reason.
     *
     * @param message - The message to alert
     */
    static alert(message: string, options?: IAlertOptions): Promise<void>;
    /**
     * Prompts the user for a string value with a user-friendly interface. Calling this method sends a request to
     * application to show the dialog.
     *
     * @remarks
     * There might be a delay until the dialog is approved and shown by the application,
     * for example, if there is another dialog currently being shown. The returned promise resolves when the dialog is
     * successfully shown and closed. The promise rejects if the application rejects the request for any reason.
     *
     * @returns The input string or undefined if the dialog was canceled
     *
     * @param message - The message for prompt dialog
     * @param defaultValue - The default value for the input text field
     */
    static prompt(message: string, options?: IPromptOptions): Promise<string | undefined>;
}
/**
 * This class handles calls to show a secondary dialog. It's only available by calling
 * this.secondaryManagerProvider inside a dialog.
 *
 * @remarks
 * Secondary dialogs do not need to request permission from dialog manager, because the primary dialog
 * already has permission. Therefore, the secondary dialog will be immediately shown. This causes the primary dialog
 * to hide until the secondary dialog is closed. There can be only one secondary dialog at a time. Additional requests
 * to show more secondary dialogs are rejected.
 *
 * See {@link BaseDialog.secondaryDialogProvider} for how to use this.
 *
 * @beta
 */
export declare class SecondaryDialogProvider {
    private _ownerRequestId;
    private _primaryManager;
    private static _create(primaryManager, ownerRequestId);
    /**
     * Similar to {@link Dialog.alert}. The only difference is that the dialog is immediately shown
     * if there are no other secondary dialogs. Otherwise, the promise rejects.
     *
     * @param options - Dialog showing options. See {@link IDialogShowOptions} for more information.
     */
    alert(message: string, options?: IAlertOptions): Promise<void>;
    /**
     * Similar to {@link Dialog.prompt}. The only difference is that the dialog is immediately shown
     * if there are no other secondary dialogs. Otherwise, the promise rejects.
     *
     * @param options - Dialog showing options. The confirmOpen option will be ignored.
     * See {@link IDialogShowOptions} for more information.
     */
    prompt(message: string, options?: IPromptOptions): Promise<string>;
    /**
     * Similar to {@link BaseDialog.show}. The dialog to show is passed in as parameter and the dialog is immediately
     * shown if there are no other secondary dialogs. Otherwise, the promise rejects.
     *
     * @param options - Dialog showing options. The confirmOpen option will be ignored.
     * See {@link IDialogShowOptions} for more information.
     */
    show(dialog: BaseDialog, options?: IDialogShowOptions): Promise<void>;
    private constructor();
}
