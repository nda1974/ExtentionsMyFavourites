"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = require("@microsoft/decorators");
var DialogManager_1 = require("./DialogManager");
var AlertDialog_1 = require("./AlertDialog");
var PromptDialog_1 = require("./PromptDialog");
var Dialog = (function () {
    function Dialog() {
    }
    Dialog.alert = function (message, options) {
        var dialogManager = DialogManager_1.default.instance;
        return dialogManager ?
            dialogManager.alert(message, options) :
            Promise.resolve(undefined);
    };
    Dialog.prompt = function (message, options) {
        var dialogManager = DialogManager_1.default.instance;
        return dialogManager ?
            dialogManager.prompt(message, options) :
            Promise.resolve(undefined);
    };
    return Dialog;
}());
exports.default = Dialog;
var SecondaryDialogProvider = (function () {
    function SecondaryDialogProvider(primaryManager, ownerRequestId) {
        this._ownerRequestId = ownerRequestId;
        this._primaryManager = primaryManager;
    }
    SecondaryDialogProvider_1 = SecondaryDialogProvider;
    SecondaryDialogProvider._create = function (primaryManager, ownerRequestId) {
        return new SecondaryDialogProvider_1(primaryManager, ownerRequestId);
    };
    SecondaryDialogProvider.prototype.alert = function (message, options) {
        var dialog = new AlertDialog_1.default(message);
        return this.show(dialog, options);
    };
    SecondaryDialogProvider.prototype.prompt = function (message, options) {
        var resolve = function () { return; };
        var promise = new Promise(function (res) { return resolve = res; });
        var dialog = new PromptDialog_1.default(message, resolve, options ? options.defaultValue : undefined);
        this.show(dialog, options);
        return promise;
    };
    SecondaryDialogProvider.prototype.show = function (dialog, options) {
        return this._primaryManager._showSecondary(dialog, this._ownerRequestId, options);
    };
    SecondaryDialogProvider = SecondaryDialogProvider_1 = __decorate([
        decorators_1.sealed
    ], SecondaryDialogProvider);
    return SecondaryDialogProvider;
    var SecondaryDialogProvider_1;
}());
exports.SecondaryDialogProvider = SecondaryDialogProvider;
